name: WordPress CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  code-quality:
    name: Code Quality & Standards
    runs-on: ubuntu-latest

    strategy:
      matrix:
        php-version: ['7.4', '8.0', '8.1', '8.2']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ matrix.php-version }}
        extensions: mbstring, intl, pdo_mysql
        coverage: xdebug
        tools: composer:v2, phpcs, phpstan, psalm

    - name: Validate composer.json and composer.lock
      run: composer validate --strict

    - name: Cache Composer packages
      id: composer-cache
      uses: actions/cache@v3
      with:
        path: vendor
        key: ${{ runner.os }}-php-${{ matrix.php-version }}-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-php-${{ matrix.php-version }}-

    - name: Install dependencies
      run: composer install --prefer-dist --no-progress

    - name: WordPress Coding Standards
      run: vendor/bin/phpcs --standard=WordPress --extensions=php --ignore=vendor/,node_modules/ .

    - name: PHP Static Analysis (PHPStan)
      run: vendor/bin/phpstan analyse --memory-limit=1G

    - name: Security Analysis (Psalm)
      run: vendor/bin/psalm --output-format=github

    - name: PHP Mess Detector
      run: vendor/bin/phpmd . text phpmd.xml --exclude vendor,node_modules

  wordpress-tests:
    name: WordPress Integration Tests
    runs-on: ubuntu-latest

    strategy:
      matrix:
        wordpress-version: ['6.2', '6.3', '6.4']
        php-version: ['7.4', '8.1']

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: wordpress_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ matrix.php-version }}
        extensions: mbstring, intl, pdo_mysql
        coverage: xdebug

    - name: Setup WordPress test environment
      run: |
        bash bin/install-wp-tests.sh wordpress_test root root 127.0.0.1:3306 ${{ matrix.wordpress-version }}

    - name: Install dependencies
      run: composer install --prefer-dist --no-progress

    - name: Run WordPress unit tests
      run: vendor/bin/phpunit

    - name: Run WordPress integration tests
      run: vendor/bin/phpunit --testsuite=integration

  security-scan:
    name: Security Vulnerability Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.1'
        tools: composer:v2

    - name: Install dependencies
      run: composer install --prefer-dist --no-progress

    - name: Security Checker
      run: composer audit

    - name: PHP Security Checker
      run: |
        curl -sSL https://github.com/fabpot/local-php-security-checker/releases/download/v2.0.6/local-php-security-checker_2.0.6_linux_amd64 -o security-checker
        chmod +x security-checker
        ./security-checker

  plugin-validation:
    name: WordPress Plugin Validation
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install WordPress Plugin Check
      run: npm install -g @wordpress/plugin-check

    - name: Validate plugin structure
      run: wp-plugin-check .

    - name: Check WordPress.org guidelines compliance
      run: |
        # Check for prohibited functions
        if grep -r "curl\|file_get_contents\|eval\|exec\|system" --include="*.php" . --exclude-dir=vendor; then
          echo "Warning: Found potentially prohibited functions"
          exit 1
        fi

        # Check for proper escaping
        if ! grep -r "esc_html\|esc_attr\|wp_kses" --include="*.php" . --exclude-dir=vendor; then
          echo "Warning: Insufficient output escaping detected"
        fi

  accessibility-tests:
    name: Accessibility & Performance Tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install dependencies
      run: npm install

    - name: Build assets
      run: npm run build

    - name: Run accessibility tests
      run: npm run test:a11y

    - name: Performance audit
      run: npm run test:performance

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [code-quality, wordpress-tests, security-scan, plugin-validation]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install dependencies
      run: npm install

    - name: Build production assets
      run: npm run build:prod

    - name: Create plugin ZIP
      run: |
        mkdir -p dist
        # Create lightweight plugin package excluding all development files
        zip -r dist/quickscan-connector.zip . \
          -x "*.git*" "node_modules/*" "vendor/*" "tests/*" "bin/*" ".github/*" \
          "composer.json" "composer.lock" "package*.json" "webpack.config.js" \
          "phpcs.xml" "phpstan.neon" "psalm.xml" "phpmd.xml" "*.md" \
          ".eslintrc*" ".prettier*" ".stylelintrc*" ".babelrc*" \
          "coverage/*" "*.log" "*.map" "assets/js/*" "assets/scss/*" \
          ".env*" ".vscode/*" ".idea/*" "*.swp" "*.swo" ".DS_Store"

    - name: Extract version from plugin file
      id: version
      run: |
        VERSION=$(grep "Version:" quickscan-connector.php | sed 's/.*Version: *\([0-9.]*\).*/\1/')
        echo "version=v$VERSION" >> $GITHUB_OUTPUT
        echo "raw_version=$VERSION" >> $GITHUB_OUTPUT

    - name: Check if release exists
      id: release-exists
      run: |
        if gh release view "v${{ steps.version.outputs.raw_version }}" >/dev/null 2>&1; then
          echo "exists=true" >> $GITHUB_OUTPUT
          echo "⚠️ Release v${{ steps.version.outputs.raw_version }} already exists"
        else
          echo "exists=false" >> $GITHUB_OUTPUT
          echo "✅ Creating new release v${{ steps.version.outputs.raw_version }}"
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      if: steps.version.outputs.version != '' && steps.release-exists.outputs.exists == 'false'
      with:
        tag_name: ${{ steps.version.outputs.version }}
        name: Release ${{ steps.version.outputs.version }}
        files: dist/quickscan-connector.zip
        generate_release_notes: true
        draft: false
        prerelease: false
        body: |
          ## 🚀 Quickscan Connector ${{ steps.version.outputs.version }}

          ### 📦 Installation
          Download the `quickscan-connector.zip` file and upload it to your WordPress site via **Plugins → Add New → Upload Plugin**.

          ### 🔄 Auto-Updates
          This plugin supports automatic updates. Once installed, you'll receive notifications when new versions are available.

          ### 📋 What's Changed
          ${{ github.event.head_commit.message }}

          **Full Changelog**: https://github.com/${{ github.repository }}/compare/${{ steps.version.outputs.version }}...HEAD

          ---

          **Need help?** Visit our [support page](https://github.com/${{ github.repository }}/issues) or contact us at support@guardian360.nl
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Notify about existing release
      if: steps.release-exists.outputs.exists == 'true'
      run: |
        echo "::warning::Release v${{ steps.version.outputs.raw_version }} already exists. To create a new release:"
        echo "1. Update the version number in quickscan-connector.php"
        echo "2. Commit the changes"
        echo "3. Push to main branch"